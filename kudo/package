#!/usr/bin/env bash

#set -euo pipefail

display_usage() {
	echo "This script updates the image locations in the KUDO packages"
  echo "and downloads all related images"
  echo -e "\nUsage:\n ./kudo_offline [repository_url] \n"	
	exit 1
}

notification() {
	echo -e "\e[32m${1}\e[0m"
}

# Init
if [ $# -lt 1 ]; then
  display_usage
fi

KUDO_PLUGIN_VERSION="${2:-0.12.0}"
REPO_URL="${1:-localhost:5000}"

# Community KUDO Repository
KUDO_REPO_URL="https://kudo-repository.storage.googleapis.com"

# KUDO Packages
KUDO_PACKAGE="kudo"
KAFKA_PACKAGE="0.10.0/kafka-2.4.1_1.2.1.tgz"
CASSANDRA_PACKAGE="0.10.0/cassandra-3.11.5_0.1.2.tgz"
SPARK_PACKAGE="0.10.0/spark-2.4.5_1.0.0.tgz"
ELASTIC_PACKAGE=""

#KUDO PLugin
declare -a KUDO_PLUGIN_IMAGES=(
  "kudobuilder/controller:v${KUDO_PLUGIN_VERSION}"
)

# KUDO Container Images by Package
# Kafka 0.10.0/kafka-2.4.1_1.2.1.tgz
declare -a KAFKA_IMAGES=(
  "mesosphere/kafka:workload"
  "mesosphere/kafka:1.1.0-2.4.0"
  "busybox:1.31.1"
  "mesosphere/kafka:2.4.1-1.2.1"
  "shubhanilbag/kafka:2.4.0-1.3.0"
  "quay.io/prometheus/node-exporter:v0.18.1"
  "mesosphere/cruise-control:2.0.77-1.3.0"
)
												 
# Spark 0.10.0/spark-2.4.5_1.0.0.tgz
declare -a SPARK_IMAGES=(
  "mesosphere/kudo-spark-operator:2.4.5-1.0.0"
  "mesosphere/spark:spark-2.4.5-hadoop-2.9-k8s"
)

# Cassandra 0.10.0/cassandra-3.11.5_0.1.2.tgz
declare -a CASSANDRA_IMAGES=(
  "mesosphere/cassandra:3.11.5-0.1.2"
  "mesosphere/cassandra-prometheus-exporter:2.2.1-0.1.2"
)
												 
# Elastic 
declare -a ELASTIC_IMAGES=()


cleanup_dir() {

  local PACKAGE_DIR="$1"

  if [ -d "./${PACKAGE_DIR}" ]; then
    notification "Removing old archive package directory ${PACKAGE_DIR}"
    rm -rf ${PACKAGE_DIR}
  fi
}

pull_container_images() {

  local PACKAGE_DIR=$1; shift
	local KUDO_IMAGES=("$@")
  local IMAGE_PATH="images/${PACKAGE_DIR}"

	# Create images directory to store container images
  if [ ! -d ${IMAGE_PATH} ]; then
    mkdir -p ${IMAGE_PATH}
  fi
  
  for i in "${KUDO_IMAGES[@]}"
  do
  	if [ ! -f "${IMAGE_PATH}/${i##*/}.tar" ]; then
		  notification "Pulling ${i}"
      docker pull ${i}
  	  docker save -o ${IMAGE_PATH}/${i##*/}.tar ${i}
    fi
  done
}

download() {
	local URL="${1}"
	local PACKAGE="${URL##*/}"

  notification "Downloading ${PACKAGE} from ${URL}"

	if [ ! -f ${PACKAGE} ]; then
		curl -OL ${URL}
  fi
}

download_kudo_packages() { 
  
	local PACKAGE="${1##*/}"
	local PACKAGE_DIR="${2}"
	local URL="${3}"

  download "${URL}"
  tar -xvf ${PACKAGE} -C ${PACKAGE_DIR}
}

stage_directory() {

	local PACKAGE_DIR="${1}"

  cleanup_dir "${PACKAGE_DIR}"
	mkdir ${PACKAGE_DIR}
}

update_registry_references() {
	
	local PACKAGE_DIR="${1}"
	local KUDO_IMAGES=("$@")

  for i in "${KUDO_IMAGES[@]}"
  do
    notification "Updating references to ${i}"
  	find $PACKAGE_DIR -type f -name '*.yaml' -exec echo Checking... {} \; -exec sed -i '' -e s,${i},${REPO_URL}/${i},g {} \;
  done
}


enable_offline_mode() {

  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
	PACKAGE_URL=$1; shift
  PACKAGE="${PACKAGE_URL##*/}"
  PACKAGE_DIR=${PACKAGE%%-*}
	KUDO_IMAGES=($@)
  PACKAGE_REF=${PACKAGE%%.tgz}-${REPO_URL}.tgz

  stage_directory "${PACKAGE_DIR}"
  
	pull_container_images "${PACKAGE_DIR}" "${KUDO_IMAGES[@]}"

  download_kudo_packages "${PACKAGE}" "${PACKAGE_DIR}" "${KUDO_REPO_URL}/${PACKAGE_URL}"
  
	update_registry_references "${PACKAGE_DIR}" "${KUDO_IMAGES[@]}"

  create_packages "${PACKAGE_DIR}" "${PACKAGE_REF}"

  cleanup_dir "${PACKAGE_DIR}"
}

instructions() {
	local MESSAGE="Use the following instruction to install the kubectl kudo plugin in your air-gapped environment
  
    Make the kubectl binary executable.

    chmod +x ./kubectl
    Move the binary in to your PATH.
    
    sudo mv ./kubectl/usr/local/bin/kubectl
    Install KUDO Plugin
    Download the latest release with the command:
    
    curl -OL https://github.com/kudobuilder/kudo/releases/download/v${KUDO_PLUGIN_VERSION}/kubectl-kudo_${KUDO_PLUGIN_VERSION}_linux_x86_64
    Make the kubectl-kudo binary executable.
    
    chmod +x kubectl-kudo_${KUDO_PLUGIN_VERSION}_linux_x86_64
    sudo mv ./kubectl-kudo_${KUDO_PLUGIN_VERSION}_linux_x86_64 /usr/local/bin/.
    sudo ln -s /usr/local/bin/kubectl-kudo_${KUDO_PLUGIN_VERSION}_linux_x86_64 /usr/local/bin/kubectl-kudo
    Load the kubectl-kudo plugin.
    
    kubectl plugin list
    Verify the kubectl-kudo plugin is functional.
    
    kubectl kudo
    To initialize the environment.
    
    kubectl kudo init --kudo-image=${REPO_URL}/controller:v${KUDO_PLUGIN_VERSION}"
	
	notification "${MESSAGE}"
  echo "${MESSAGE}" > INSTALL.txt
  notification "See INSTALL.txt"

}

kudo_packages() {
  download "https://github.com/kudobuilder/kudo/releases/download/v${KUDO_PLUGIN_VERSION}/kubectl-kudo_${KUDO_PLUGIN_VERSION}_linux_x86_64"
	pull_container_images "${KUDO_PACKAGE}" "${KUDO_PLUGIN_IMAGES[@]}"
  create_packages "${KUDO_PACKAGE}"
}

create_packages() {
  local PACKAGE_DIR="$1"
  local PACKAGE_REF="$2"
  local IMAGES_DIR="images"

  if [ ! -f ${PACKAGE_DIR}-${IMAGES_DIR}.tgz ]; then
    if [ ! -z ${PACKAGE_REF} ]; then
      tar -zcvf ${PACKAGE_REF} -C ${PACKAGE_DIR} .
    fi
    tar -zcvf ${PACKAGE_DIR}-${IMAGES_DIR}.tgz -C ./${IMAGES_DIR}/${PACKAGE_DIR} .
    rm -rf ./${IMAGES_DIR}/${PACKAGE_DIR}
  fi
  
  if [ "$(ls -A ./${IMAGES_DIR})" ]; then
    rm -rf ./${IMAGE_DIR}
  fi
}
  
kudo_packages
enable_offline_mode "${KAFKA_PACKAGE}" "${KAFKA_IMAGES[@]}"
enable_offline_mode "${SPARK_PACKAGE}" "${SPARK_IMAGES[@]}"
enable_offline_mode "${CASSANDRA_PACKAGE}" "${CASSANDRA_IMAGES[@]}"
instructions

